{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","action","Object","assign","initialStateRobots","logger","createLogger","store","combineReducers","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2a74b04.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = ({name,email,id})=>{\r\n\t\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots'src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<p>{email}</p>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardlist = ({robots}) =>{\r\n\t\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user,i) =>{\r\n\t\t\t\t\r\n\t\t\t\treturn ( \r\n\t\t\t\t <Card\r\n\t\t \t\t  key={i} \r\n\t\t\t\t  id={robots[i].id} \r\n\t\t\t\t  name={robots[i].name} \r\n\t\t\t\t  email={robots[i].email}\r\n\t\t\t\t />\r\n\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t}\t\r\n\t\t</div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange})=>{\r\n\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\r\n\t\t\t<input \r\n\t\t\tclassName= 'pa2\r\n\t\t\t'type='search' \r\n\t\t\tplaceholder='search robot'\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t\t\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black',  height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n} \r\n\r\nexport default Scroll; ","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor (props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch (error, info) {\r\n\tthis.setState({hasError: true})\r\n}\r\n\r\n\r\nrender () {\r\n\tif (this.state.hasError) {\r\n\t\treturn <h1>Oooops. That is not good</h1>\r\n\t}\r\n\treturn this.props.children\r\n\r\n}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setSearchField, requestRobots } from '../actions';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scroll from '../component/Scroll';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\t\treturn {\r\n\t\t\tsearchField: state.searchRobots.searchField,\r\n\t\t\trobots: state.requestRobots.robots,\r\n\t\t\tisPending: state.requestRobots.isPending,\r\n\t\t\terror: state.requestRobots.error\r\n\t\t}\r\n\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t\t\r\n\r\ncomponentDidMount() {\r\n\tthis.props.onRequestRobots();\r\n}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\r\n\treturn isPending ? \r\n\t\t<h1>Loading</h1>:\r\n\t\t\t(\r\n\t\t\t\t\t<div className= 'tc'>\r\n\t\t\t\t\t\t<h1 className='f1'>ROBOFRIENDS</h1>\r\n\t\t\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\t\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCES,\r\n\tREQUEST_ROBOTS_FAIL\r\n} from'./constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCES, payload: data}))\r\n\t\t.catch(error => ({type: REQUEST_ROBOTS_FAIL, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCES = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_PENDING';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCES,\r\n\tREQUEST_ROBOTS_FAIL\r\n} from'./constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField:''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror:'' \r\n\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCES:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAIL:\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\t\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, combineReducers, applyMiddleware } from 'redux';\nimport {createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger()\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore (searchRobots, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}